"use strict";(self.webpackChunk_2256184693_github_io=self.webpackChunk_2256184693_github_io||[]).push([[189],{9683:(n,a,e)=>{e.r(a),e.d(a,{data:()=>s});const s={key:"v-40ef5830",path:"/guide/konva.html",title:"",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"Konva",slug:"konva",children:[{level:3,title:"概论",slug:"概论",children:[]},{level:3,title:"实现",slug:"实现",children:[]},{level:3,title:"结论",slug:"结论",children:[]}]}],filePathRelative:"guide/konva.md"}},9045:(n,a,e)=>{e.r(a),e.d(a,{default:()=>p});const s=(0,e(6252).uE)('<h2 id="konva" tabindex="-1"><a class="header-anchor" href="#konva" aria-hidden="true">#</a> Konva</h2><h3 id="概论" tabindex="-1"><a class="header-anchor" href="#概论" aria-hidden="true">#</a> 概论</h3><p>用于桌面和移动应用的HTML5 + 2d的canvas库</p><p>内置对HDPI设备的支持，并通过像素比率优化实现了清晰的文字和形状</p><p>高效实现动画、变换、节点嵌套、局部操作、滤镜、缓存、事件等功能.</p><p>面向对象开发</p><p>Konva最大的特点是图形可交互，Konva的所有的图形都可以监听事件，实现类似于原生DOM的交互方式。(事件驱动的结构，可以对canvas中元素订阅各种更改事件)。</p><p>支持Filters滤镜</p><p>支持选择器查找元素。</p><h3 id="实现" tabindex="-1"><a class="header-anchor" href="#实现" aria-hidden="true">#</a> 实现</h3><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>             Stage\n                |\n         +------+------+\n         |             |\n       Layer         Layer\n         |             |\n   +-----+-----+     Shape\n   |           |\n Group       Group\n   |           |\n   +       +---+---+\n   |       |       |\nShape   Group    Shape\n           |\n           +\n           |\n         Shape\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><ul><li><p>Virtual Nodes</p></li><li><p>Custom Shape = Shape Class + draw function</p></li><li><p>事件监听</p><blockquote><p>是在层（Konva.Layer）的基础上实现的，每一个层有一个用于显示图形的前台渲染器和用于监听事件的后台渲染器，通过在后台渲染器中注册全局事件来判断当前触发事件的图形，并调用处理事件的回调。Konva很大程度上借鉴了浏览器的DOM，比如Konva通过定义舞台（Konva.Stage）来存储所有图形，类似于html标签，定义层来显示图形，类似于body标签。其中的节点嵌套、事件监听、节点查找等等也借鉴了DOM操作</p></blockquote></li></ul><h3 id="结论" tabindex="-1"><a class="header-anchor" href="#结论" aria-hidden="true">#</a> 结论</h3><blockquote><p>更适合类PS功能需求的项目。</p></blockquote><ol><li><p>虽然对文本处理有了一定的优化，但总体还是具有较弱的文本渲染能力。</p></li><li><p>canvas不依赖dom，动画效果会有比较好的性能（拖拽动画），但终极方案是否要加入实时预览此类功能？</p></li><li><p>canvas中的元素事件其实都是由canvas元素分发出去的。</p></li><li><p>canvas中的元素都需要基于基准点的绝对定位坐标和绝对的长度来绘制图形，若要结合flex则还需要再做处理。</p></li><li><p>排版逻辑 需要定制。算法调研</p></li></ol>',15),l={},p=(0,e(3744).Z)(l,[["render",function(n,a){return s}]])},3744:(n,a)=>{a.Z=(n,a)=>{const e=n.__vccOpts||n;for(const[n,s]of a)e[n]=s;return e}}}]);