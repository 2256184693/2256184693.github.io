"use strict";(self.webpackChunk_2256184693_github_io=self.webpackChunk_2256184693_github_io||[]).push([[352],{1770:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-144c6831",path:"/pages/leecode/29.%E4%B8%A4%E6%95%B0%E7%9B%B8%E9%99%A4.divide-two-integers.html",title:"两数相除",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"基础解法",slug:"基础解法",children:[]},{level:2,title:"位运算",slug:"位运算",children:[]},{level:2,title:"位运算 - 优化版",slug:"位运算-优化版",children:[]},{level:2,title:"技能点掌握",slug:"技能点掌握",children:[]}],filePathRelative:"pages/leecode/29.两数相除.divide-two-integers.md"}},6269:(n,s,a)=>{a.r(s),a.d(s,{default:()=>w});var p=a(6252);const e=(0,p._)("h1",{id:"两数相除",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#两数相除","aria-hidden":"true"},"#"),(0,p.Uk)(" 两数相除")],-1),t=(0,p.Uk)("🚀 "),o={href:"https://leetcode-cn.com/problems/divide-two-integers/",target:"_blank",rel:"noopener noreferrer"},c=(0,p.Uk)("问题链接"),l=(0,p.uE)('<details class="custom-container details"><summary>问题描述</summary><p>给定两个整数，被除数 dividend 和除数 divisor。将两数相除，要求不使用乘法、除法和 mod 运算符。</p><p>返回被除数 dividend 除以除数 divisor 得到的商。</p><p>整数除法的结果应当截去（truncate）其小数部分，例如：truncate(8.345) = 8 以及 truncate(-2.7335) = -2</p><blockquote><p>示例 1:</p></blockquote><p>输入: dividend = 10, divisor = 3 输出: 3 解释: 10/3 = truncate(3.33333..) = truncate(3) = 3</p><blockquote><p>示例 2:</p></blockquote><p>输入: dividend = 7, divisor = -3 输出: -2 解释: 7/-3 = truncate(-2.33333..) = -2</p><p><strong>提示：</strong></p><ul><li><p>被除数和除数均为 32 位有符号整数，除数不为 0。</p></li><li><p>假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−231,  231 − 1]。</p></li><li><p>本题中，如果除法结果溢出，则返回 231 − 1。</p></li></ul></details><div class="custom-container tip"><p class="custom-container-title">解题前的准备工作（如果有必要的话）</p><ol><li>提前处理符号，实际运算时使用 <code>绝对值</code> 运算，最后对结果进行符号处理。</li><li>提前做好一些特殊边界的处理。</li></ol></div><h2 id="基础解法" tabindex="-1"><a class="header-anchor" href="#基础解法" aria-hidden="true">#</a> 基础解法</h2><p>本题是一个运算题，题目要求不允许使用乘法、除法和mod运算符，自然首先想到使用减法。</p><p>例如： <code>10 / 3</code></p><p>将被除数 10 减去 3 得到一个新值， 然后重复使用新值减去 3 ， 直到结果小于 3 为止，一共需要减3次，则结果为3。</p><p>公式为：<code>10 - 3 - 3 - 3 = 1</code>，小于 3 停止。</p><p>这样的解法的核心思路是<strong>重复减去除数</strong>，直到不够减为止，减的次数就是结果。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">divide3</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">dividend<span class="token punctuation">,</span> divisor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> isNegative <span class="token operator">=</span> <span class="token punctuation">(</span>dividend <span class="token operator">^</span> divisor<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>dividend<span class="token punctuation">)</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>divisor<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;=</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    a <span class="token operator">-=</span> b<span class="token punctuation">;</span>\n    res <span class="token operator">++</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> isNegative <span class="token operator">?</span> <span class="token operator">-</span>res <span class="token operator">:</span> res<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>该解法效率非常低，需要进一步的优化思路。</p></div><h2 id="位运算" tabindex="-1"><a class="header-anchor" href="#位运算" aria-hidden="true">#</a> 位运算</h2><p>除法的公式是 <code>被除数 / 除数 = 商 ... 余数</code>，替换一下公式， 变为 <code>除数 * 某个数 &lt;= 被除数</code>，满足条件的最大的某个数就是结果。</p>',12),r=(0,p.Uk)("题目限制使用乘法和除法，在"),u=(0,p._)("code",null,"Javascript",-1),i=(0,p.Uk)("中自然想到使用"),k={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators#%E4%BD%8D%E7%A7%BB%E8%BF%90%E7%AE%97%E7%AC%A6",target:"_blank",rel:"noopener noreferrer"},d=(0,p.Uk)("位移运算符"),b=(0,p.Uk)("替代。"),m=(0,p.uE)('<p>题目限制为32位整数（0 ~ 31），从 0 开始，对除数进行位运算，直到满足公式停止。</p><p>例如： <code>10 / 3</code></p><p><code>3 &lt;&lt; 0 = 3</code> 小于 10，</p><p><code>3 &lt;&lt; 1 = 6</code> 小于 10，</p><p><code>3 &lt;&lt; 2 = 12</code> 大于 10，此时停止</p><p>余数 <code>10 - 3 * (2 ^ 1) = 4</code> 大于 3，则继续对余数执行相同的位运算操作。</p><p><code>3 &lt;&lt; 0 = 3</code> 小于 4，</p><p><code>3 &lt;&lt; 0 = 3</code> 大于 4，此时停止</p><p>余数 <code>4 - 3 * (2 ^ 0) = 1</code> 小于 3，运算结束。</p><p>最终的结果为 <code>3 * (2 ^ 1) + 3 * (2 ^ 0) = 9 &lt; 10</code> 。</p><p>因此本题答案为 <code>2 ^ 1 + 2 ^ 0 = 3</code> 。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">divide</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">dividend<span class="token punctuation">,</span> divisor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">const</span> <span class="token constant">MAX</span> <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">31</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">const</span> <span class="token constant">MIN</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">**</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">const</span> isNegative <span class="token operator">=</span> <span class="token punctuation">(</span>dividend <span class="token operator">^</span> divisor<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>dividend<span class="token punctuation">)</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>divisor<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">while</span><span class="token punctuation">(</span>a <span class="token operator">&gt;=</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> base <span class="token operator">=</span> b<span class="token punctuation">;</span>\n        <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>base <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            base <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n            count <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        a <span class="token operator">-=</span> base<span class="token punctuation">;</span>\n        res <span class="token operator">+=</span> count<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    res <span class="token operator">=</span> isNegative <span class="token operator">?</span> <span class="token operator">-</span>res <span class="token operator">:</span> res<span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">&gt;</span> <span class="token constant">MAX</span> <span class="token operator">||</span> res <span class="token operator">&lt;</span> <span class="token constant">MIN</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token constant">MAX</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> res<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>优化后，运行仍然超时，继续优化。</p></div><h2 id="位运算-优化版" tabindex="-1"><a class="header-anchor" href="#位运算-优化版" aria-hidden="true">#</a> 位运算 - 优化版</h2><p>继续优化位运算，上一个解法中需要执行两次循环，那一次循环是否可行呢？</p><p>题目限制为32位整数（0 ~ 31），与之相反从31开始，进行位运算，直到满足公式。</p><p>例如：100 / 3</p><p><code>100 &gt;&gt;&gt; 31 = 0</code> 结果非常小</p><p>···</p><p><code>100 &gt;&gt;&gt; 6 = 1</code> 小于3</p><p><code>100 &gt;&gt;&gt; 5 = 3</code> 等于3</p><p>注意，本轮运算过后，此时的余数 <code>100 - 3 * (2 ^ 5) = 4</code>。</p><p>对余数继续执行位运算操作。</p><p><code>4 &gt;&gt;&gt; 4 = 0</code> 结果非常小</p><p><code>4 &gt;&gt;&gt; 3 = 0</code> 结果非常小</p><p><code>4 &gt;&gt;&gt; 2 = 1</code> 小于3</p><p><code>4 &gt;&gt;&gt; 1 = 1</code> 小于3</p><p><code>4 &gt;&gt;&gt; 0 = 4</code> 大于3</p><p>同上操作，此时余数 <code>100 - 3 * (2 ^ 5) - 3 * (2 ^ 0) = 1</code>。</p><p>此时位运算结束。得到本题答案 <code>2 ^ 5 + 2 ^ 0 = 33</code> 。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">divide</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">dividend<span class="token punctuation">,</span> divisor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>dividend <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">const</span> <span class="token constant">MAX</span> <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">31</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> <span class="token constant">MIN</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">**</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>dividend <span class="token operator">===</span> <span class="token constant">MIN</span> <span class="token operator">&amp;&amp;</span> divisor <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token constant">MAX</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>dividend <span class="token operator">===</span> <span class="token constant">MIN</span> <span class="token operator">&amp;&amp;</span> divisor <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token constant">MIN</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">const</span> isNegative <span class="token operator">=</span> <span class="token punctuation">(</span>dividend <span class="token operator">^</span> divisor<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>dividend<span class="token punctuation">)</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>divisor<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;&gt;&gt;</span> i <span class="token operator">&gt;=</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      res <span class="token operator">+=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">;</span>\n      a <span class="token operator">-=</span> b <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> isNegative <span class="token operator">?</span> <span class="token operator">-</span>res <span class="token operator">:</span> res<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><p>😋 成功通过用例测试。</p><h2 id="技能点掌握" tabindex="-1"><a class="header-anchor" href="#技能点掌握" aria-hidden="true">#</a> 技能点掌握</h2>',33),v={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators#%E4%BD%8D%E7%A7%BB%E8%BF%90%E7%AE%97%E7%AC%A6",target:"_blank",rel:"noopener noreferrer"},g=(0,p.Uk)("位移运算符"),h={},w=(0,a(3744).Z)(h,[["render",function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[e,(0,p._)("p",null,[t,(0,p._)("a",o,[c,(0,p.Wm)(a)])]),l,(0,p._)("p",null,[r,u,i,(0,p._)("a",k,[d,(0,p.Wm)(a)]),b]),m,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("a",v,[g,(0,p.Wm)(a)])])])],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);