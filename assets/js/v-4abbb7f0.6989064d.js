"use strict";(self.webpackChunk_2256184693_github_io=self.webpackChunk_2256184693_github_io||[]).push([[560],{1613:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-4abbb7f0",path:"/pages/work/1.%E8%AF%B7%E6%B1%82%E5%8F%96%E6%B6%88.axios-cancel.html",title:"实际业务中如何取消请求",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"可能的业务场景",slug:"可能的业务场景",children:[]},{level:2,title:"服务端通信方式",slug:"服务端通信方式",children:[{level:3,title:"Axios介绍",slug:"axios介绍",children:[]},{level:3,title:"复杂处理",slug:"复杂处理",children:[]}]},{level:2,title:"如何取消请求",slug:"如何取消请求",children:[]},{level:2,title:"业务化封装",slug:"业务化封装",children:[{level:3,title:"流程梳理",slug:"流程梳理",children:[]},{level:3,title:"请求标识",slug:"请求标识",children:[]},{level:3,title:"请求队列",slug:"请求队列",children:[]},{level:3,title:"加入到拦截器中",slug:"加入到拦截器中",children:[]},{level:3,title:"实际使用代码",slug:"实际使用代码",children:[]}]},{level:2,title:"技能点掌握",slug:"技能点掌握",children:[]}],filePathRelative:"pages/work/1.请求取消.axios-cancel.md"}},849:(n,s,a)=>{a.r(s),a.d(s,{default:()=>G});var p=a(6252);const t=(0,p.uE)('<h1 id="实际业务中如何取消请求" tabindex="-1"><a class="header-anchor" href="#实际业务中如何取消请求" aria-hidden="true">#</a> 实际业务中如何取消请求</h1><p>🚀 业务项目中会频繁的发起请求同服务端通信，过程中会产生一些重复请求。如果不对这些重复请求合理的处理，会导致系统出现各种问题。</p><p>针对这种情况，我们该如何有效处理来避免意外错误出现呢？</p><h2 id="可能的业务场景" tabindex="-1"><a class="header-anchor" href="#可能的业务场景" aria-hidden="true">#</a> 可能的业务场景</h2><ul><li><p>一个具有多项条件的Form表单，提交请求后返回数据列表，并渲染到页面的Table中，这个场景会出现在典型的Admin管理项目中。假设用户提交第一次查询后更改查询条件，再次提交查询，这时就产生了两次请求。如果数据接口响应时间不稳定，第二次请求先于第一次请求返回，前端如果不处理的话很可能会将第一次请求的结果展示到页面中，产生异常。</p></li><li><p>一个C端提交页面，用户连续多次点击提交按钮提交，导致服务端多次响应。</p></li></ul><h2 id="服务端通信方式" tabindex="-1"><a class="header-anchor" href="#服务端通信方式" aria-hidden="true">#</a> 服务端通信方式</h2><h3 id="axios介绍" tabindex="-1"><a class="header-anchor" href="#axios介绍" aria-hidden="true">#</a> Axios介绍</h3>',7),e={href:"https://axios-http.com/",target:"_blank",rel:"noopener noreferrer"},o=(0,p.Uk)("Axios"),c=(0,p.Uk)(" 是一个基于 Promise 的 HTTP 客户端，而且同时支持浏览器和 Node.js 环境，在Web应用中被广泛使用。我们看下如何使用 Axios 分别发起 GET 和 POST 请求："),l=(0,p._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,p._)("pre",{class:"language-javascript"},[(0,p._)("code",null,[(0,p.Uk)("axios"),(0,p._)("span",{class:"token punctuation"},"."),(0,p._)("span",{class:"token function"},"get"),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token string"},"'/user?id=123'"),(0,p._)("span",{class:"token punctuation"},")"),(0,p._)("span",{class:"token punctuation"},"."),(0,p._)("span",{class:"token function"},"then"),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token parameter"},"response"),(0,p.Uk)(),(0,p._)("span",{class:"token operator"},"=>"),(0,p.Uk)(),(0,p._)("span",{class:"token punctuation"},"{"),(0,p.Uk)("\n  "),(0,p._)("span",{class:"token comment"},"// 处理响应结果"),(0,p.Uk)("\n"),(0,p._)("span",{class:"token punctuation"},"}"),(0,p._)("span",{class:"token punctuation"},")"),(0,p._)("span",{class:"token punctuation"},"."),(0,p._)("span",{class:"token function"},"catch"),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token parameter"},"error"),(0,p.Uk)(),(0,p._)("span",{class:"token operator"},"=>"),(0,p.Uk)(),(0,p._)("span",{class:"token punctuation"},"{"),(0,p.Uk)("\n  "),(0,p._)("span",{class:"token comment"},"// 处理异常情况"),(0,p.Uk)("\n"),(0,p._)("span",{class:"token punctuation"},"}"),(0,p._)("span",{class:"token punctuation"},")"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n")])]),(0,p._)("div",{class:"line-numbers"},[(0,p._)("span",{class:"line-number"},"1"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"2"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"3"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"4"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"5"),(0,p._)("br")])],-1),u=(0,p._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,p._)("pre",{class:"language-javascript"},[(0,p._)("code",null,[(0,p.Uk)("axios"),(0,p._)("span",{class:"token punctuation"},"."),(0,p._)("span",{class:"token function"},"post"),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token string"},"'/user'"),(0,p._)("span",{class:"token punctuation"},","),(0,p.Uk)(),(0,p._)("span",{class:"token punctuation"},"{"),(0,p.Uk)("\n  "),(0,p._)("span",{class:"token literal-property property"},"id"),(0,p._)("span",{class:"token operator"},":"),(0,p.Uk)(),(0,p._)("span",{class:"token number"},"123"),(0,p._)("span",{class:"token punctuation"},","),(0,p.Uk)("\n"),(0,p._)("span",{class:"token punctuation"},"}"),(0,p._)("span",{class:"token punctuation"},")"),(0,p._)("span",{class:"token punctuation"},"."),(0,p._)("span",{class:"token function"},"then"),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token parameter"},"response"),(0,p.Uk)(),(0,p._)("span",{class:"token operator"},"=>"),(0,p.Uk)(),(0,p._)("span",{class:"token punctuation"},"{"),(0,p.Uk)("\n  "),(0,p._)("span",{class:"token comment"},"// 处理响应结果"),(0,p.Uk)("\n"),(0,p._)("span",{class:"token punctuation"},"}"),(0,p._)("span",{class:"token punctuation"},")"),(0,p._)("span",{class:"token punctuation"},"."),(0,p._)("span",{class:"token function"},"catch"),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token parameter"},"error"),(0,p.Uk)(),(0,p._)("span",{class:"token operator"},"=>"),(0,p.Uk)(),(0,p._)("span",{class:"token punctuation"},"{"),(0,p.Uk)("\n  "),(0,p._)("span",{class:"token comment"},"// 处理异常情况"),(0,p.Uk)("\n"),(0,p._)("span",{class:"token punctuation"},"}"),(0,p._)("span",{class:"token punctuation"},")"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n")])]),(0,p._)("div",{class:"line-numbers"},[(0,p._)("span",{class:"line-number"},"1"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"2"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"3"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"4"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"5"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"6"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"7"),(0,p._)("br")])],-1),r=(0,p.uE)('<h3 id="复杂处理" tabindex="-1"><a class="header-anchor" href="#复杂处理" aria-hidden="true">#</a> 复杂处理</h3><p>在实际的业务项目中，一般不会直接使用Axios，而会先对Axios业务化封装，增加一些个性化的统一处理逻辑，使程序员在开发过中就无需考虑很多公共问题，比如：</p><ul><li><p>统一的服务端HOST</p></li><li><p>超时限制</p></li><li><p>Cookie上报</p></li><li><p>登录Token</p></li><li><p>未登录处理</p></li><li><p>异常信息展示</p></li><li><p>···</p></li></ul>',3),i=(0,p.Uk)("这就必须提到 Axios 中的 "),k={href:"https://axios-http.com/docs/interceptors",target:"_blank",rel:"noopener noreferrer"},b=(0,p._)("strong",null,"拦截器",-1),_=(0,p.Uk)(" 了。拦截器有 "),m=(0,p._)("strong",null,"请求拦截器",-1),d=(0,p.Uk)(" 和 "),h=(0,p._)("strong",null,"响应拦截器",-1),g=(0,p.Uk)(" 两种。"),U=(0,p.uE)('<p>在一个 Axios 实例中配置了两种拦截器后，使用该实例发起的所有请求都会先经过请求拦截器的处理，然后发出请求。返回的响应也会先经过响应拦截器的处理，再返回到具体的请求响应逻辑中。</p><p>以上的许多公共的处理逻辑我们可以在拦截器中一一实现，这样实际开发中就无需在考虑了。</p><div class="custom-container tip"><p class="custom-container-title">友情提示</p><p>如果服务端存在多个域，而且处理逻辑也有差异，那么可以使用 <strong>工厂模式</strong> 来创建多个不同配置的Axios实例。当然，其中的公共处理逻辑可以抽象成公共函数复用。</p></div><p>完整的业务封装可以查看<a href="#%E5%AE%9E%E9%99%85%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%A0%81">文末示例</a>。</p><h2 id="如何取消请求" tabindex="-1"><a class="header-anchor" href="#如何取消请求" aria-hidden="true">#</a> 如何取消请求</h2><p>发送请求后我们是否可以主动的取消请求？当然也是可以的。</p>',6),f=(0,p.Uk)("在浏览器中，我们发起请求使用的是 "),y={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest",target:"_blank",rel:"noopener noreferrer"},v=(0,p.Uk)("XMLHttpRequest"),x=(0,p.Uk)("这个原生对象，它提供了 abort 函数来取消请求。"),E=(0,p._)("p",null,[(0,p.Uk)("Axios在此基础上做了封装，内部提供了 "),(0,p._)("code",null,"CancelToken"),(0,p.Uk)(" 这个 API。")],-1),w=(0,p._)("code",null,"CancelToken",-1),A=(0,p.Uk)(" 本质上也是在内部调用了 abort 函数 来取消当前的请求。感兴趣的同学可以去查看"),T={href:"https://github.com/axios/axios/blob/master/lib/cancel/CancelToken.js",target:"_blank",rel:"noopener noreferrer"},R=(0,p.Uk)("源码"),j=(0,p._)("p",null,[(0,p.Uk)("使用方式也有两种，一种是 "),(0,p._)("code",null,"CancelToken.source"),(0,p.Uk)(" 工厂函数，一种是实例化是传入cancel函数。")],-1),q=(0,p._)("p",null,"具体示例如下；",-1),C=(0,p._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,p._)("pre",{class:"language-javascript"},[(0,p._)("code",null,[(0,p._)("span",{class:"token keyword"},"const"),(0,p.Uk)(" xhr "),(0,p._)("span",{class:"token operator"},"="),(0,p.Uk)(),(0,p._)("span",{class:"token keyword"},"new"),(0,p.Uk)(),(0,p._)("span",{class:"token class-name"},"XMLHttpRequest"),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token punctuation"},")"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n\nxhr"),(0,p._)("span",{class:"token punctuation"},"."),(0,p._)("span",{class:"token function"},"open"),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token string"},"'GET'"),(0,p._)("span",{class:"token punctuation"},","),(0,p.Uk)(),(0,p._)("span",{class:"token string"},"'https://some-domain/api/user?id=123'"),(0,p._)("span",{class:"token punctuation"},","),(0,p.Uk)(),(0,p._)("span",{class:"token boolean"},"true"),(0,p._)("span",{class:"token punctuation"},")"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n\nxhr"),(0,p._)("span",{class:"token punctuation"},"."),(0,p._)("span",{class:"token function"},"send"),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token punctuation"},")"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n\n"),(0,p._)("span",{class:"token comment"},"// 取消请求"),(0,p.Uk)("\nxhr"),(0,p._)("span",{class:"token punctuation"},"."),(0,p._)("span",{class:"token function"},"abort"),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token punctuation"},")"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n")])]),(0,p._)("div",{class:"line-numbers"},[(0,p._)("span",{class:"line-number"},"1"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"2"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"3"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"4"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"5"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"6"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"7"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"8"),(0,p._)("br")])],-1),Q=(0,p._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,p._)("pre",{class:"language-javascript"},[(0,p._)("code",null,[(0,p._)("span",{class:"token keyword"},"const"),(0,p.Uk)(" CancelToken "),(0,p._)("span",{class:"token operator"},"="),(0,p.Uk)(" axios"),(0,p._)("span",{class:"token punctuation"},"."),(0,p.Uk)("CancelToken"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n\n"),(0,p._)("span",{class:"token keyword"},"const"),(0,p.Uk)(" source "),(0,p._)("span",{class:"token operator"},"="),(0,p.Uk)(" CancelToken"),(0,p._)("span",{class:"token punctuation"},"."),(0,p._)("span",{class:"token function"},"source"),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token punctuation"},")"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n\naxios"),(0,p._)("span",{class:"token punctuation"},"."),(0,p._)("span",{class:"token function"},"get"),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token string"},"'/user?id=123'"),(0,p._)("span",{class:"token punctuation"},","),(0,p.Uk)(),(0,p._)("span",{class:"token punctuation"},"{"),(0,p.Uk)("\n  "),(0,p._)("span",{class:"token comment"},"// 添加cancelToken"),(0,p.Uk)("\n  "),(0,p._)("span",{class:"token literal-property property"},"cancelToken"),(0,p._)("span",{class:"token operator"},":"),(0,p.Uk)(" source"),(0,p._)("span",{class:"token punctuation"},"."),(0,p._)("span",{class:"token function"},"token"),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token punctuation"},")"),(0,p._)("span",{class:"token punctuation"},","),(0,p.Uk)("\n"),(0,p._)("span",{class:"token punctuation"},"}"),(0,p._)("span",{class:"token punctuation"},")"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n\naxios"),(0,p._)("span",{class:"token punctuation"},"."),(0,p._)("span",{class:"token function"},"post"),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token string"},"'/user'"),(0,p._)("span",{class:"token punctuation"},","),(0,p.Uk)(),(0,p._)("span",{class:"token punctuation"},"{"),(0,p.Uk)(),(0,p._)("span",{class:"token literal-property property"},"id"),(0,p._)("span",{class:"token operator"},":"),(0,p.Uk)(),(0,p._)("span",{class:"token number"},"123"),(0,p.Uk)(),(0,p._)("span",{class:"token punctuation"},"}"),(0,p._)("span",{class:"token punctuation"},","),(0,p.Uk)(),(0,p._)("span",{class:"token punctuation"},"{"),(0,p.Uk)("\n  "),(0,p._)("span",{class:"token comment"},"// 添加cancelToken"),(0,p.Uk)("\n  "),(0,p._)("span",{class:"token literal-property property"},"cancelToken"),(0,p._)("span",{class:"token operator"},":"),(0,p.Uk)(" source"),(0,p._)("span",{class:"token punctuation"},"."),(0,p._)("span",{class:"token function"},"token"),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token punctuation"},")"),(0,p._)("span",{class:"token punctuation"},","),(0,p.Uk)("\n"),(0,p._)("span",{class:"token punctuation"},"}"),(0,p._)("span",{class:"token punctuation"},")"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n\n"),(0,p._)("span",{class:"token comment"},"// 此处调用cancel函数 取消请求"),(0,p.Uk)("\nsource"),(0,p._)("span",{class:"token punctuation"},"."),(0,p._)("span",{class:"token function"},"cancel"),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token string"},"'cancel request'"),(0,p._)("span",{class:"token punctuation"},")"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n")])]),(0,p._)("div",{class:"line-numbers"},[(0,p._)("span",{class:"line-number"},"1"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"2"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"3"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"4"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"5"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"6"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"7"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"8"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"9"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"10"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"11"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"12"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"13"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"14"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"15"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"16"),(0,p._)("br")])],-1),P=(0,p._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,p._)("pre",{class:"language-javascript"},[(0,p._)("code",null,[(0,p._)("span",{class:"token keyword"},"const"),(0,p.Uk)(" CancelToken "),(0,p._)("span",{class:"token operator"},"="),(0,p.Uk)(" axios"),(0,p._)("span",{class:"token punctuation"},"."),(0,p.Uk)("CancelToken"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n\n"),(0,p._)("span",{class:"token keyword"},"let"),(0,p.Uk)(" cancelFunction"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n\naxios"),(0,p._)("span",{class:"token punctuation"},"."),(0,p._)("span",{class:"token function"},"get"),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token string"},"'/user?id=123'"),(0,p._)("span",{class:"token punctuation"},","),(0,p.Uk)(),(0,p._)("span",{class:"token punctuation"},"{"),(0,p.Uk)("\n  "),(0,p._)("span",{class:"token comment"},"// 添加cancelToken"),(0,p.Uk)("\n  "),(0,p._)("span",{class:"token literal-property property"},"cancelToken"),(0,p._)("span",{class:"token operator"},":"),(0,p.Uk)(),(0,p._)("span",{class:"token keyword"},"new"),(0,p.Uk)(),(0,p._)("span",{class:"token class-name"},"CancelToken"),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token keyword"},"function"),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token parameter"},"c"),(0,p._)("span",{class:"token punctuation"},")"),(0,p.Uk)(),(0,p._)("span",{class:"token punctuation"},"{"),(0,p.Uk)("\n    "),(0,p._)("span",{class:"token comment"},"// 记录cancel函数"),(0,p.Uk)("\n    cancelFunction "),(0,p._)("span",{class:"token operator"},"="),(0,p.Uk)(" c"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n  "),(0,p._)("span",{class:"token punctuation"},"}"),(0,p._)("span",{class:"token punctuation"},")"),(0,p._)("span",{class:"token punctuation"},","),(0,p.Uk)("\n"),(0,p._)("span",{class:"token punctuation"},"}"),(0,p._)("span",{class:"token punctuation"},")"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n\naxios"),(0,p._)("span",{class:"token punctuation"},"."),(0,p._)("span",{class:"token function"},"post"),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token string"},"'/user'"),(0,p._)("span",{class:"token punctuation"},","),(0,p.Uk)(),(0,p._)("span",{class:"token punctuation"},"{"),(0,p.Uk)(),(0,p._)("span",{class:"token literal-property property"},"id"),(0,p._)("span",{class:"token operator"},":"),(0,p.Uk)(),(0,p._)("span",{class:"token number"},"123"),(0,p.Uk)(),(0,p._)("span",{class:"token punctuation"},"}"),(0,p._)("span",{class:"token punctuation"},","),(0,p.Uk)(),(0,p._)("span",{class:"token punctuation"},"{"),(0,p.Uk)("\n  "),(0,p._)("span",{class:"token comment"},"// 添加cancelToken"),(0,p.Uk)("\n  "),(0,p._)("span",{class:"token literal-property property"},"cancelToken"),(0,p._)("span",{class:"token operator"},":"),(0,p.Uk)(),(0,p._)("span",{class:"token keyword"},"new"),(0,p.Uk)(),(0,p._)("span",{class:"token class-name"},"CancelToken"),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token keyword"},"function"),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token parameter"},"c"),(0,p._)("span",{class:"token punctuation"},")"),(0,p.Uk)(),(0,p._)("span",{class:"token punctuation"},"{"),(0,p.Uk)("\n    "),(0,p._)("span",{class:"token comment"},"// 记录cancel函数"),(0,p.Uk)("\n    cancelFunction "),(0,p._)("span",{class:"token operator"},"="),(0,p.Uk)(" c"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n  "),(0,p._)("span",{class:"token punctuation"},"}"),(0,p._)("span",{class:"token punctuation"},")"),(0,p._)("span",{class:"token punctuation"},","),(0,p.Uk)("\n"),(0,p._)("span",{class:"token punctuation"},"}"),(0,p._)("span",{class:"token punctuation"},")"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n\n"),(0,p._)("span",{class:"token comment"},"// 此处调用cancel函数 取消请求"),(0,p.Uk)("\n"),(0,p._)("span",{class:"token function"},"cancelFunction"),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token punctuation"},")"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n")])]),(0,p._)("div",{class:"line-numbers"},[(0,p._)("span",{class:"line-number"},"1"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"2"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"3"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"4"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"5"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"6"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"7"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"8"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"9"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"10"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"11"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"12"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"13"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"14"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"15"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"16"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"17"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"18"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"19"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"20"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"21"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"22"),(0,p._)("br")])],-1),B=(0,p.uE)('<h2 id="业务化封装" tabindex="-1"><a class="header-anchor" href="#业务化封装" aria-hidden="true">#</a> 业务化封装</h2><h3 id="流程梳理" tabindex="-1"><a class="header-anchor" href="#流程梳理" aria-hidden="true">#</a> 流程梳理</h3><p>上一节了解到了使用 Axios 如何取消请求，当然，不是所有的请求都要被取消，我们需要知道哪些请求需要被取消。</p><p>对应本文开头的应用场景，我们可以定义：一个请求在同一页面中如果<strong>重复出现了多次</strong>，就算重复请求了。对于这些重复请求我们需要执行取消逻辑。</p><p>重复出现的接口有什么特征呢？</p><ul><li><p>相同的请求URL</p></li><li><p>相同的请求方式</p></li><li><p>相同的请求参数</p></li></ul><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>注意：不同的请求参数有时也算是重复请求。例如：<a href="#%E5%8F%AF%E8%83%BD%E7%9A%84%E4%B8%9A%E5%8A%A1%E5%9C%BA%E6%99%AF">场景一</a>。</p></div><p>分析完毕，我们重新梳理一下流程：</p><ol><li><p>发起请求A1。</p></li><li><p>发起请求A2，此时<strong>请求A1还未完成</strong>，命中取消逻辑。</p></li><li><p>执行取消逻辑，<strong>取消请求A1</strong>，完成取消操作。</p></li><li><p>请求A2正常响应。</p></li></ol><p>针对上述流程，我们必须在发送 A2 时，知晓 A1 此时的状态，当然，也需要知道 A1 和 A2 是否算是重复请求。</p><p>因此，我们需要一个<strong>请求队列</strong>来记录当前未完成的请求，需要制定一个规则来标识重复函数。</p><h3 id="请求标识" tabindex="-1"><a class="header-anchor" href="#请求标识" aria-hidden="true">#</a> 请求标识</h3><p>正常情况下，相同的URL、相同的请求方式、相同的参数，算做重复请求。</p><p>有些特殊情况下，相同的URL、相同的请求方式、不同的请求参数，也应该算作重复请求。</p><p>因此，处理的时候要对请求参数做兼并处理。</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p><code>__REQUEST_KEY__</code> 传入该字段来代替默认生成的请求标识</p><p><code>__IGNORE_PARAMS__</code> 传入该字段代表当前请求忽略参数判断重复。</p><p>这两个字段开放给<strong>实际开发者</strong>，来局部调整内部的取消逻辑。 <a href="#%E5%AE%9E%E9%99%85%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%A0%81">使用示例</a></p></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">generateRequestKey</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span>\n    url<span class="token punctuation">,</span>\n    method<span class="token punctuation">,</span>\n    params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">// 该字段如果用户传入，代表使用该字段作为请求的key，而无需按照通用逻辑生成</span>\n    __REQUEST_KEY__ <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>\n    __IGNORE_PARAMS__ <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span> <span class="token operator">=</span> config<span class="token punctuation">;</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>__REQUEST_KEY__<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> __REQUEST_KEY__<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 如果忽略参数，则不将参数算入请求标识中</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>__IGNORE_PARAMS__<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">[</span>url<span class="token punctuation">,</span> method<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&amp;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 如果不忽略参数，则参数仍算入请求标识中</span>\n  <span class="token keyword">return</span> <span class="token punctuation">[</span>url<span class="token punctuation">,</span> method<span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&amp;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h3 id="请求队列" tabindex="-1"><a class="header-anchor" href="#请求队列" aria-hidden="true">#</a> 请求队列</h3><p>我们需要定义一个请求队列，每一个将要发出的请求首先进入请求队列，每一个完成的请求退出请求队列。</p><p>同时队列中的请求存有请求标识以及取消函数，便于进行重复判定和执行取消操作。</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>此处我们采用 Axios取消请求的<a href="#%E5%A6%82%E4%BD%95%E5%8F%96%E6%B6%88%E8%AF%B7%E6%B1%82">方式二</a>，存储 cancel 函数方便自行取消特定请求。</p></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>\n<span class="token doc-comment comment">/**\n * <span class="token punctuation">{</span> key: string, cancel: Function <span class="token punctuation">}</span>\n */</span>\n<span class="token keyword">const</span> requestQueue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n\n<span class="token comment">// 入队列函数</span>\n<span class="token keyword">const</span> <span class="token function-variable function">addRequestQueue</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> requestKey <span class="token operator">=</span> <span class="token function">generateRequestKey</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  config<span class="token punctuation">.</span>cancelToken <span class="token operator">=</span> config<span class="token punctuation">.</span>cancelToken <span class="token operator">||</span> <span class="token keyword">new</span> <span class="token class-name">CancelToken</span><span class="token punctuation">(</span><span class="token parameter">c</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    requestQueue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token literal-property property">key</span><span class="token operator">:</span> requestKey<span class="token punctuation">,</span>\n      <span class="token literal-property property">cancel</span><span class="token operator">:</span> c<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 出队列函数</span>\n<span class="token keyword">const</span> <span class="token function-variable function">removeRequestQueue</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> requestKey <span class="token operator">=</span> <span class="token function">generateRequestKey</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> requestQueue<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>requestQueue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">===</span> requestKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      requestQueue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      requestQueue<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><h3 id="加入到拦截器中" tabindex="-1"><a class="header-anchor" href="#加入到拦截器中" aria-hidden="true">#</a> 加入到拦截器中</h3><p>将以上的几个工具函数加入到拦截器中。</p><p>😋 这样，一个比较完整的Axios封装就完成了。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">&#39;axios&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token punctuation">{</span> generateRequestKey<span class="token punctuation">,</span> addRequestQueue<span class="token punctuation">,</span> removeRequestQueue <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./uitls&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 创建一个axios实例</span>\n<span class="token keyword">const</span> axiosInstance <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// 在此处设置baseURL，这样发起请求时无需补齐host，直接 /api/xxx 即可 。</span>\n  <span class="token literal-property property">baseURL</span><span class="token operator">:</span> <span class="token string">&#39;https://some-domain.com/api&#39;</span><span class="token punctuation">,</span>\n  <span class="token comment">// 设置为true后，axios发送请求时会自动携带Cookie</span>\n  <span class="token literal-property property">withCredentials</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token comment">// 设置接口超时时间。</span>\n  <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">30000</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 可以在此处存放登录后获取到的token信息。</span>\n    <span class="token string-property property">&#39;X-Token&#39;</span><span class="token operator">:</span> <span class="token string">&#39;xxxxxx&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 配置请求拦截器</span>\naxiosInstance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token parameter">config</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 执行重复判断逻辑取消请求</span>\n  <span class="token function">removeRequestQueue</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// 将当前请求推入请求队列</span>\n  <span class="token function">addRequestQueue</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> config<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">error</span> <span class="token operator">=&gt;</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 配置响应拦截器</span>\naxiosInstance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> config<span class="token punctuation">,</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> response<span class="token punctuation">;</span>\n\n  <span class="token comment">// 将已完成的请求退出请求队列</span>\n  <span class="token function">removeRequestQueue</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token doc-comment comment">/**\n   * 可以同服务端约定异常状态码，在此处统一处理接口返回的异常信息。\n   */</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>code <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">401</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 在未登录时跳到登录页</span>\n      window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">&#39;https://login-page.com&#39;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token function">alert</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> data<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> config <span class="token punctuation">}</span> <span class="token operator">=</span> error<span class="token punctuation">;</span>\n  <span class="token comment">// 将已完成的请求退出请求队列</span>\n  <span class="token function">removeRequestQueue</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>axios<span class="token punctuation">.</span><span class="token function">isCancel</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 处理非取消导致的接口异常情况</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">return</span> axiosInstance<span class="token punctuation">;</span>\n</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br></div></div><h3 id="实际使用代码" tabindex="-1"><a class="header-anchor" href="#实际使用代码" aria-hidden="true">#</a> 实际使用代码</h3><p>实际的业务代码中可能会像下面的方式使用：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">&#39;./axiosInstance.js&#39;</span><span class="token punctuation">;</span>\n\n<span class="token doc-comment comment">/**\n * GET请求\n */</span>\n\n<span class="token comment">// 忽略参数判断， URL和请求方式重复即请求重复</span>\naxios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/user&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">__IGNORE_PARAMS__</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 自行传入requestKey</span>\naxios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/user&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">__REQUEST_KEY__</span><span class="token operator">:</span> <span class="token string">&#39;getUser&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token doc-comment comment">/**\n * POST请求\n */</span>\n\n<span class="token comment">// 忽略参数判断， URL和请求方式重复即请求重复</span>\naxios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/user&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">__IGNORE_PARAMS__</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 自行传入requestKey</span>\naxios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/user&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">__REQUEST_KEY__</span><span class="token operator">:</span> <span class="token string">&#39;postUser&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><div class="highlight-line"> </div><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><h2 id="技能点掌握" tabindex="-1"><a class="header-anchor" href="#技能点掌握" aria-hidden="true">#</a> 技能点掌握</h2>',30),S={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest",target:"_blank",rel:"noopener noreferrer"},I=(0,p.Uk)("XMLHttpRequest"),W={href:"https://axios-http.com",target:"_blank",rel:"noopener noreferrer"},K=(0,p.Uk)("Axios 官网"),F={href:"https://github.com/axios/axios",target:"_blank",rel:"noopener noreferrer"},L=(0,p.Uk)("Axios 源码"),O={},G=(0,a(3744).Z)(O,[["render",function(n,s){const a=(0,p.up)("OutboundLink"),O=(0,p.up)("CodeGroupItem"),G=(0,p.up)("CodeGroup");return(0,p.wg)(),(0,p.iD)(p.HY,null,[t,(0,p._)("p",null,[(0,p._)("a",e,[o,(0,p.Wm)(a)]),c]),(0,p.Wm)(G,null,{default:(0,p.w5)((()=>[(0,p.Wm)(O,{title:"GET",active:""},{default:(0,p.w5)((()=>[l])),_:1}),(0,p.Wm)(O,{title:"POST"},{default:(0,p.w5)((()=>[u])),_:1})])),_:1}),r,(0,p._)("p",null,[i,(0,p._)("a",k,[b,(0,p.Wm)(a)]),_,m,d,h,g]),U,(0,p._)("p",null,[f,(0,p._)("a",y,[v,(0,p.Wm)(a)]),x]),E,(0,p._)("p",null,[w,A,(0,p._)("a",T,[R,(0,p.Wm)(a)])]),j,q,(0,p.Wm)(G,null,{default:(0,p.w5)((()=>[(0,p.Wm)(O,{title:"浏览器"},{default:(0,p.w5)((()=>[C])),_:1}),(0,p.Wm)(O,{title:"Axios 方式一",active:""},{default:(0,p.w5)((()=>[Q])),_:1}),(0,p.Wm)(O,{title:"Axios 方式二",active:""},{default:(0,p.w5)((()=>[P])),_:1})])),_:1}),B,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[(0,p._)("a",S,[I,(0,p.Wm)(a)])])]),(0,p._)("li",null,[(0,p._)("p",null,[(0,p._)("a",W,[K,(0,p.Wm)(a)])])]),(0,p._)("li",null,[(0,p._)("p",null,[(0,p._)("a",F,[L,(0,p.Wm)(a)])])])])],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);