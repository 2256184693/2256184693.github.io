"use strict";(self.webpackChunk_2256184693_github_io=self.webpackChunk_2256184693_github_io||[]).push([[935],{5991:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-28d475ab",path:"/pages/leecode/5.%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2.longest-palindromic-substring.html",title:"最长回文子串",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"中心扩散枚举",slug:"中心扩散枚举",children:[]},{level:2,title:"动态规划",slug:"动态规划",children:[]},{level:2,title:"技能点掌握",slug:"技能点掌握",children:[]}],filePathRelative:"pages/leecode/5.最长回文子串.longest-palindromic-substring.md"}},4357:(n,s,a)=>{a.r(s),a.d(s,{default:()=>d});var p=a(6252);const t=(0,p._)("h1",{id:"最长回文子串",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#最长回文子串","aria-hidden":"true"},"#"),(0,p.Uk)(" 最长回文子串")],-1),o=(0,p.Uk)("🚀 "),e={href:"https://leetcode-cn.com/problems/longest-palindromic-substring/",target:"_blank",rel:"noopener noreferrer"},c=(0,p.Uk)("问题链接"),l=(0,p.uE)('<details class="custom-container details"><summary>问题描述</summary><p>给你一个字符串 <code>s</code>，找到 <code>s</code> 中最长的回文子串。</p><blockquote><p>示例 1:</p></blockquote><p>输入：s = &quot;babad&quot; 输出：&quot;bab&quot; 解释：&quot;aba&quot; 同样是符合题意的答案。</p><blockquote><p>示例 2:</p></blockquote><p>输入：s = &quot;cbbd&quot; 输出：&quot;bb&quot;</p><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 1000</code></li><li><code>s</code> 仅由数字和英文字母组成</li></ul></details><div class="custom-container tip"><p class="custom-container-title">解题前的准备</p><ol><li>回文串指的是将字符串颠倒顺序后保持不变的字符串。例如 <code>a</code>、<code>aa</code>、<code>aba</code>。</li><li>单个字符也算回文串。</li></ol></div><h2 id="中心扩散枚举" tabindex="-1"><a class="header-anchor" href="#中心扩散枚举" aria-hidden="true">#</a> 中心扩散枚举</h2><p>既然找最长回文子串，只要枚举所有的回文子串，找到最长的那个即可。</p><p>一个回文串的头尾都相同，直到中心位置时停止，此时要注意<strong>奇数和偶数长度</strong>的不同。</p><p>对于奇数回文串，中心位置在中心的字母。例如：<code>aba</code> 的中心是字母 <code>a</code>。</p><p>对于偶数回文串，中心位置在中心的两个字母之间。例如：<code>abba</code> 的中心是字母 <code>bb</code>的中间。</p><p>所以在求解前，先处理一下字符串抹平奇偶的差异。</p><p>两个字母中间的缝隙也要算作一个潜在中心，那直接将缝隙也比作一个字母，这样在求解的过程中就将奇偶情况统一考虑了。</p><p>例如： <code>aba</code> =&gt; <code>a$b$a</code>。这样求解后再将缝隙处理即可。</p><p><strong>注意缝隙填充时一定要使用不会干扰题目的特殊字符</strong>。</p><p>找到一个潜在的中心点，向字符串左右两边遍历，直到不满足回文串条件停止，记录当前的最长回文串。</p><p>这样遍历完所有的潜在中心点，就能得到最长回文串。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">longestPalindrome</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 给每个缝隙添加标记，抹平奇偶差异</span>\n  s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> result <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> _ <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token comment">// 假定当前为中心点，向两边逐一查找</span>\n    <span class="token keyword">while</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i <span class="token operator">-</span> j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i <span class="token operator">+</span> j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 两端字符相同，则继续</span>\n      <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i <span class="token operator">-</span> j<span class="token punctuation">]</span> <span class="token operator">===</span> s<span class="token punctuation">[</span>i <span class="token operator">+</span> j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        _ <span class="token operator">=</span> s<span class="token punctuation">[</span>i <span class="token operator">-</span> j<span class="token punctuation">]</span> <span class="token operator">+</span> _ <span class="token operator">+</span> s<span class="token punctuation">[</span>i <span class="token operator">+</span> j<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        j<span class="token operator">++</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    _ <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> result<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      result <span class="token operator">=</span> _<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> result<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="highlight-lines"><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>本解法使用题外特殊字符占据缝隙来抹平奇偶情况，同时方便理解。</p><p>更严谨点，可以不借助题外字符，直接遍历枚举，只需额外处理偶数情况即可。</p></div><h2 id="动态规划" tabindex="-1"><a class="header-anchor" href="#动态规划" aria-hidden="true">#</a> 动态规划</h2><p>本题算是经典的动态规划算法题。</p><p>动态规划的解题思路是找到状态转移方程，也就是如何从一个简单结果转移到更复杂的结果。</p><p>首先理解这个方程：<code>长回文串 = 首位 + 短回文串 + 末位 &amp;&amp; 首位 === 末位</code>。</p><p>换言之，得到一个回文串后，如果该串左右的字符相同，则拼接后的字符串也是回文串。</p><p>用 <code>i</code> 代表字符串起点下标，<code>j</code>代表字符串终点下标，<code>SubString(i, j)</code>代表从<code>i</code>到<code>j</code>的子串是否为回文串，<code>String(i)</code>代表处于<code>i</code>位置的字符。则可得到</p><p>状态转移方程：<code>SubString(i, j) = SubString(i + 1, j - 1) ^ (String(i) === String(j))</code>。</p><p>此时，按照方程，开始循环求解即可。</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>注意状态转移方程中的依赖，计算<code>i</code>位置时依赖 <code>i+1</code>处的结果，因此循环时从后往前循环，确保过程中能取到对应的依赖结果。</p></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">longestPalindrome</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> s<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> i <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> dp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&gt;</span> res<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        res <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> res<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>😋 解题结束。</p><h2 id="技能点掌握" tabindex="-1"><a class="header-anchor" href="#技能点掌握" aria-hidden="true">#</a> 技能点掌握</h2>',27),u={href:"https://baike.baidu.com/item/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/529408",target:"_blank",rel:"noopener noreferrer"},r=(0,p.Uk)("动态规划 - 百度百科"),i={href:"https://zhuanlan.zhihu.com/p/78220312",target:"_blank",rel:"noopener noreferrer"},k=(0,p.Uk)("如何学好动态规划 - 知乎"),b={},d=(0,a(3744).Z)(b,[["render",function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[t,(0,p._)("p",null,[o,(0,p._)("a",e,[c,(0,p.Wm)(a)])]),l,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[(0,p._)("a",u,[r,(0,p.Wm)(a)])])]),(0,p._)("li",null,[(0,p._)("p",null,[(0,p._)("a",i,[k,(0,p.Wm)(a)])])])])],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);